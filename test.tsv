1	1	0	0	0	0	0	0	5870	2230	-1	
2	1	1	0	0	0	195	180	2835	410	-1	
3	1	1	1	0	0	200	180	2690	75	-1	
4	1	1	1	1	0	200	180	2690	75	-1	
5	1	1	1	1	1	200	180	295	75	95	Parsing
5	1	1	1	1	2	525	180	320	75	95	through
5	1	1	1	1	3	875	180	180	60	94	CSV
5	1	1	1	1	4	1085	180	210	75	93	using
5	1	1	1	1	5	1330	180	450	60	90	DictReader
5	1	1	1	1	6	1810	180	65	60	95	in
5	1	1	1	1	7	1910	180	275	75	92	Python
5	1	1	1	1	8	2215	215	25	5	90	-
5	1	1	1	1	9	2275	180	220	60	95	Stack
5	1	1	1	1	10	2520	180	370	60	95	Overflow
3	1	1	2	0	0	195	295	2835	295	-1	
4	1	1	2	1	0	205	295	2825	70	-1	
5	1	1	2	1	1	205	295	60	70	74	=
5	1	1	2	1	2	315	305	2715	60	69	https://stackoverflow.com/questions/13222933/parsing-through-csv-using-dictreader-...
4	1	1	2	2	0	200	425	2770	60	-1	
5	1	1	2	2	1	200	425	120	45	94	Dec
5	1	1	2	2	2	340	425	40	55	94	1,
5	1	1	2	2	3	400	425	150	45	91	2015
5	1	1	2	2	4	580	445	15	10	74	-
5	1	1	2	2	5	625	425	195	60	95	import
5	1	1	2	2	6	840	435	105	35	95	csv
5	1	1	2	2	7	965	425	205	45	95	reader
5	1	1	2	2	8	1190	435	35	20	91	=
5	1	1	2	2	9	1245	435	110	35	17	csv.
5	1	1	2	2	10	1365	425	870	60	9	DictReader(open('SNPs.csv',
5	1	1	2	2	11	2260	425	340	60	90	newline="),
5	1	1	2	2	12	2620	425	350	55	5	delimiter‘,
4	1	1	2	3	0	195	530	2770	60	-1	
5	1	1	2	3	1	195	530	440	60	32	quotechar-"")
5	1	1	2	3	2	655	530	105	45	90	But
5	1	1	2	3	3	780	530	10	45	88	|
5	1	1	2	3	4	815	530	80	45	93	do
5	1	1	2	3	5	920	530	95	45	96	not
5	1	1	2	3	6	1040	530	165	45	94	know
5	1	1	2	3	7	1230	530	130	45	96	how
5	1	1	2	3	8	1375	530	60	45	96	to
5	1	1	2	3	9	1455	530	95	45	96	tell
5	1	1	2	3	10	1575	530	35	45	96	it
5	1	1	2	3	11	1625	530	60	45	96	to
5	1	1	2	3	12	1710	530	200	60	55	ignore
5	1	1	2	3	13	1930	530	210	45	95	certain
5	1	1	2	3	14	2165	530	275	50	96	columns,
5	1	1	2	3	15	2465	530	110	45	96	and
5	1	1	2	3	16	2600	530	10	45	95	|
5	1	1	2	3	17	2635	530	160	45	94	don't
5	1	1	2	3	18	2810	530	155	45	94	think
2	1	2	0	0	0	195	635	2835	160	-1	
3	1	2	1	0	0	195	635	2835	160	-1	
4	1	2	1	1	0	195	635	2835	60	-1	
5	1	2	1	1	1	195	635	150	45	95	that
5	1	2	1	1	2	321	631	46	68	92	|
5	1	2	1	1	3	370	645	110	35	92	can
5	1	2	1	1	4	505	645	110	35	91	use
5	1	2	1	1	5	635	635	165	60	88	max()
5	1	2	1	1	6	820	635	60	45	95	to
5	1	2	1	1	7	905	635	180	45	95	return
5	1	2	1	1	8	1110	635	245	60	95	multiple
5	1	2	1	1	9	1375	635	215	45	93	values.
5	1	2	1	1	10	1615	635	205	60	87	max(2,
5	1	2	1	1	11	1840	635	55	60	95	4)
5	1	2	1	1	12	1920	635	215	45	95	returns
5	1	2	1	1	13	2160	635	50	45	95	4.
5	1	2	1	1	14	2235	635	145	45	96	EDIT
5	1	2	1	1	15	2405	635	10	45	74	|
5	1	2	1	1	16	2423	635	152	45	14	trieéd
5	1	2	1	1	17	2600	635	165	60	95	using
5	1	2	1	1	18	2790	635	240	45	82	Daniel's
4	1	2	1	2	0	195	735	2285	60	-1	
5	1	2	1	2	1	195	735	185	50	96	Code,
5	1	2	1	2	2	405	735	100	45	95	but
5	1	2	1	2	3	520	735	90	45	95	for
5	1	2	1	2	4	630	745	170	35	95	some
5	1	2	1	2	5	820	745	210	35	95	reason
5	1	2	1	2	6	1055	735	100	45	95	the
5	1	2	1	2	7	1175	735	120	45	96	sort
5	1	2	1	2	8	1310	735	255	45	96	function
5	1	2	1	2	9	1585	735	125	45	93	isn't
5	1	2	1	2	10	1725	735	250	60	96	working
5	1	2	1	2	11	2000	735	280	60	96	correctly.
5	1	2	1	2	12	2305	735	30	60	76	(I
5	1	2	1	2	13	2355	735	125	45	86	also
5	1	2	1	2	14	2505	770	45	10	86	...
2	1	3	0	0	0	200	1015	2480	75	-1	
3	1	3	1	0	0	200	1015	2565	75	-1	
4	1	3	1	1	0	200	1015	2480	75	-1	
5	1	3	1	1	1	200	1015	275	75	91	python
5	1	3	1	1	2	505	1050	25	5	91	-
5	1	3	1	1	3	565	1015	185	60	95	How
5	1	3	1	1	4	775	1015	100	60	81	do
5	1	3	1	1	5	910	1015	10	60	78	|
5	1	3	1	1	6	955	1030	145	45	85	use
5	1	3	1	1	7	1125	1015	130	60	93	the
5	1	3	1	1	8	1285	1015	415	75	92	quotechar
5	1	3	1	1	9	1725	1015	165	60	92	with
5	1	3	1	1	10	1925	1015	455	60	89	DictReader
5	1	3	1	1	11	2405	1050	25	5	91	-
5	1	3	1	1	12	2460	1015	220	60	93	Stack
5	1	3	1	1	13	2710	1065	55	10	91	...
2	1	4	0	0	0	205	1125	2825	70	-1	
3	1	4	1	0	0	205	1125	2825	70	-1	
4	1	4	1	1	0	205	1125	2825	70	-1	
5	1	4	1	1	1	205	1125	60	70	74	=
5	1	4	1	1	2	315	1135	2715	60	0	https://stackoverflow.com/questions/50931687/how-do-i-use-the-quotechar-with-dictr...
2	1	5	0	0	0	195	1255	2600	270	-1	
3	1	5	1	0	0	195	1255	2600	270	-1	
4	1	5	1	1	0	195	1255	2600	60	-1	
5	1	5	1	1	1	195	1255	225	45	0	aera
5	1	5	1	1	2	440	1255	90	45	0	temo
5	1	5	1	1	3	627	1251	97	68	21	aig
5	1	5	1	1	4	725	1255	115	45	1	oUt
5	1	5	1	1	5	945	1265	70	35	4	gem)
5	1	5	1	1	6	1040	1265	225	35	0	bee
5	1	5	1	1	7	1285	1255	60	45	39	ee)
5	1	5	1	1	8	1370	1255	170	45	24	Ee
5	1	5	1	1	9	1560	1255	295	45	0	ge)
5	1	5	1	1	10	1880	1255	210	45	0	at-bat
5	1	5	1	1	11	2110	1255	315	45	20	Ole
5	1	5	1	1	12	2445	1265	230	35	2	|)
4	1	5	1	2	0	195	1360	2465	60	-1	
5	1	5	1	2	1	195	1360	530	60	89	question.Provide
5	1	5	1	2	2	745	1360	205	45	95	details
5	1	5	1	2	3	970	1360	115	45	95	and
5	1	5	1	2	4	1110	1360	170	45	96	share
5	1	5	1	2	5	1300	1370	140	50	96	your
5	1	5	1	2	6	1465	1360	285	45	94	research!
5	1	5	1	2	7	1775	1360	100	45	96	But
5	1	5	1	2	8	1895	1360	170	45	88	avoid
5	1	5	1	2	9	2090	1395	60	10	84	....
5	1	5	1	2	10	2170	1360	215	60	96	Asking
5	1	5	1	2	11	2405	1360	85	45	96	for
5	1	5	1	2	12	2510	1360	150	60	96	help,
4	1	5	1	3	0	195	1465	1395	60	-1	
5	1	5	1	3	1	195	1465	85	45	12	elt
5	1	5	1	3	2	290	1465	66	45	12	Oi
5	1	5	1	3	3	365	1465	205	55	13	ea]
5	1	5	1	3	4	463	1461	57	68	0	(0]
5	1	5	1	3	5	590	1475	180	35	0	prem]
5	1	5	1	3	6	775	1461	153	68	11	81008
5	1	5	1	3	7	935	1465	360	45	1	eee
5	1	5	1	3	8	1315	1475	275	35	10	eee
2	1	6	0	0	0	195	1745	2825	405	-1	
3	1	6	1	0	0	195	1745	2755	180	-1	
4	1	6	1	1	0	195	1745	2755	75	-1	
5	1	6	1	1	1	195	1760	135	45	89	csv
5	1	6	1	1	2	355	1780	80	5	89	—
5	1	6	1	1	3	460	1745	180	60	96	CSV
5	1	6	1	1	4	670	1745	140	60	95	File
5	1	6	1	1	5	840	1745	330	75	95	Reading
5	1	6	1	1	6	1200	1745	150	60	96	and
5	1	6	1	1	7	1380	1745	280	75	91	Writing
5	1	6	1	1	8	1690	1780	80	5	88	—
5	1	6	1	1	9	1800	1745	275	75	96	Python
5	1	6	1	1	10	2110	1745	200	60	95	3.8.0
5	1	6	1	1	11	2340	1745	610	60	95	documentation
4	1	6	1	2	0	195	1850	1390	75	-1	
5	1	6	1	2	1	195	1850	75	75	50	(@
5	1	6	1	2	2	315	1865	1270	60	26	https://docs.python.org/3/library/csv.htm!
3	1	6	2	0	0	195	1985	2825	165	-1	
4	1	6	2	1	0	195	1985	2825	60	-1	
5	1	6	2	1	1	195	1985	120	45	96	The
5	1	6	2	1	2	335	1995	105	35	93	csv
5	1	6	2	1	3	460	1985	235	45	95	module
5	1	6	2	1	4	715	1985	365	60	95	implements
5	1	6	2	1	5	1100	1985	225	45	96	classes
5	1	6	2	1	6	1345	1985	65	45	95	to
5	1	6	2	1	7	1430	1985	140	45	96	read
5	1	6	2	1	8	1590	1985	115	45	96	and
5	1	6	2	1	9	1730	1985	150	45	95	write
5	1	6	2	1	10	1900	1985	220	45	96	tabular
5	1	6	2	1	11	2140	1985	135	45	94	data
5	1	6	2	1	12	2300	1985	50	45	94	in
5	1	6	2	1	13	2370	1985	140	45	76	CSV
5	1	6	2	1	14	2525	1985	215	45	96	format.
5	1	6	2	1	15	2765	1985	40	45	93	It
5	1	6	2	1	16	2825	1985	195	45	95	allows
4	1	6	2	2	0	200	2090	2755	60	-1	
5	1	6	2	2	1	200	2100	415	50	94	programmers
5	1	6	2	2	2	635	2090	60	45	95	to
5	1	6	2	2	3	720	2100	115	50	95	say,
5	1	6	2	2	4	860	2090	175	45	95	"write
5	1	6	2	2	5	1055	2090	105	45	95	this
5	1	6	2	2	6	1185	2090	135	45	95	data
5	1	6	2	2	7	1345	2090	50	45	96	in
5	1	6	2	2	8	1415	2090	100	45	96	the
5	1	6	2	2	9	1535	2090	205	45	95	format
5	1	6	2	2	10	1760	2090	290	60	96	preferred
5	1	6	2	2	11	2075	2090	70	60	96	by
5	1	6	2	2	12	2170	2090	195	50	72	Excel,”
5	1	6	2	2	13	2385	2100	65	35	95	or
5	1	6	2	2	14	2470	2090	165	45	95	"read
5	1	6	2	2	15	2660	2090	130	45	96	data
5	1	6	2	2	16	2815	2090	140	45	96	from
2	1	7	0	0	0	195	2195	2720	35	-1	
3	1	7	1	0	0	195	2195	2720	35	-1	
4	1	7	1	1	0	195	2195	2720	35	-1	
5	1	7	1	1	1	195	2195	110	35	31	a=
5	1	7	1	1	2	325	2195	90	35	22	=
5	1	7	1	1	3	460	2191	56	39	18	ea
5	1	7	1	1	4	516	2191	72	39	18	liad
5	1	7	1	1	5	597	2195	14	35	27	a
5	1	7	1	1	6	640	2205	120	25	28	Pao
5	1	7	1	1	7	821	2205	50	25	9	al
5	1	7	1	1	8	870	2191	95	39	37	ea
5	1	7	1	1	9	1005	2195	93	35	23	ee
5	1	7	1	1	10	1130	2195	255	35	34	ee
5	1	7	1	1	11	1440	2195	185	35	27	a
5	1	7	1	1	12	1640	2195	35	35	20	ee
5	1	7	1	1	13	1845	2191	40	39	1	ee
5	1	7	1	1	14	1885	2205	75	25	35	ed
5	1	7	1	1	15	1980	2195	100	35	31	a
5	1	7	1	1	16	2111	2191	138	39	19	te
5	1	7	1	1	17	2248	2195	75	35	31	oe
5	1	7	1	1	18	2323	2191	56	39	22	ee
5	1	7	1	1	19	2384	2191	56	39	30	oy
5	1	7	1	1	20	2440	2191	56	39	0	ee
5	1	7	1	1	21	2498	2195	7	35	23	|
2	1	8	0	0	0	3465	190	2065	220	-1	
3	1	8	1	0	0	3465	190	2065	220	-1	
4	1	8	1	1	0	3465	190	2065	100	-1	
5	1	8	1	1	1	3465	190	390	100	96	Parsing
5	1	8	1	1	2	3890	190	420	100	95	through
5	1	8	1	1	3	4350	190	230	80	95	CSV
5	1	8	1	1	4	4615	190	285	100	93	using
5	1	8	1	1	5	4940	190	590	80	92	DictReader
4	1	8	1	2	0	3465	310	495	100	-1	
5	1	8	1	2	1	3465	310	85	80	95	in
5	1	8	1	2	2	3595	310	365	100	95	Python
2	1	9	0	0	0	3470	445	2040	75	-1	
3	1	9	1	0	0	3470	445	2040	75	-1	
4	1	9	1	1	0	3470	445	2040	75	-1	
5	1	9	1	1	1	3470	445	60	70	46	=}
5	1	9	1	1	2	3580	460	1930	60	86	http://stackoverflow.com/questions/13222933/ddg#13223206
2	1	10	0	0	0	3465	780	1935	70	-1	
3	1	10	1	0	0	3465	780	1935	70	-1	
4	1	10	1	1	0	3465	780	1935	70	-1	
5	1	10	1	1	1	3465	780	165	55	74	cOL2
5	1	10	1	1	2	3655	790	230	45	93	doesn't
5	1	10	1	1	3	3905	790	150	45	96	have
5	1	10	1	1	4	4075	800	110	50	96	any
5	1	10	1	1	5	4210	790	285	45	95	numbers.
5	1	10	1	1	6	4520	790	60	45	90	I'll
5	1	10	1	1	7	4600	800	240	35	96	assume
5	1	10	1	1	8	4860	800	115	50	96	you
5	1	10	1	1	9	5000	790	195	45	89	meant
5	1	10	1	1	10	5215	780	185	55	85	coL3.
2	1	11	0	0	0	3460	925	2100	350	-1	
3	1	11	1	0	0	3460	925	2100	350	-1	
4	1	11	1	1	0	3460	925	1880	60	-1	
5	1	11	1	1	1	3460	925	115	45	84	You
5	1	11	1	1	2	3595	925	150	45	90	can't
5	1	11	1	1	3	3760	925	95	45	95	tell
5	1	11	1	1	4	3875	925	180	45	96	which
5	1	11	1	1	5	4080	935	100	35	96	are
5	1	11	1	1	6	4195	925	105	45	95	the
5	1	11	1	1	7	4315	925	100	45	95	ten
5	1	11	1	1	8	4440	925	230	60	77	highest
5	1	11	1	1	9	4695	925	270	45	96	numbers
5	1	11	1	1	10	4990	925	50	45	93	in
5	1	11	1	1	11	5060	925	130	45	61	col3
5	1	11	1	1	12	5215	925	125	45	64	until
4	1	11	1	2	0	3460	1020	1870	60	-1	
5	1	11	1	2	1	3460	1020	205	60	95	you've
5	1	11	1	2	2	3690	1020	135	45	94	read
5	1	11	1	2	3	3845	1020	160	45	94	them
5	1	11	1	2	4	4025	1020	85	45	96	all.
5	1	11	1	2	5	4135	1020	80	45	80	So
5	1	11	1	2	6	4235	1020	160	45	95	since
5	1	11	1	2	7	4415	1020	195	60	96	you're
5	1	11	1	2	8	4630	1020	175	60	95	going
5	1	11	1	2	9	4825	1020	65	45	96	to
5	1	11	1	2	10	4915	1020	75	45	95	be
5	1	11	1	2	11	5010	1020	175	60	96	doing
5	1	11	1	2	12	5205	1020	125	45	96	that
4	1	11	1	3	0	3460	1120	2100	60	-1	
5	1	11	1	3	1	3460	1130	250	50	95	anyway,
5	1	11	1	3	2	3730	1130	115	50	96	you
5	1	11	1	3	3	3870	1120	170	60	96	might
5	1	11	1	3	4	4060	1130	70	35	96	as
5	1	11	1	3	5	4150	1120	125	45	95	well
5	1	11	1	3	6	4300	1120	135	45	96	read
5	1	11	1	3	7	4455	1120	350	60	96	everything,
5	1	11	1	3	8	4825	1120	140	45	95	then
5	1	11	1	3	9	4985	1120	215	45	96	extract
5	1	11	1	3	10	5215	1120	105	45	96	the
5	1	11	1	3	11	5340	1120	100	60	95	top
5	1	11	1	3	12	5460	1120	100	45	95	ten
4	1	11	1	4	0	3460	1215	1440	60	-1	
5	1	11	1	4	1	3460	1215	230	45	0	Itai]
5	1	11	1	4	2	3699	1211	52	68	20	Ce
5	1	11	1	4	3	3760	1215	150	45	18	ee
5	1	11	1	4	4	3930	1225	115	50	26	O80
5	1	11	1	4	5	4065	1211	60	68	33	er:
5	1	11	1	4	6	4140	1215	140	45	0	pele
5	1	11	1	4	7	4323	1225	34	35	0	1e
5	1	11	1	4	8	4385	1211	154	68	0	Fin)
5	1	11	1	4	9	4538	1215	362	45	7	em
2	1	12	0	0	0	3500	1405	2030	375	-1	
3	1	12	1	0	0	3500	1405	760	160	-1	
4	1	12	1	1	0	3500	1405	460	70	-1	
5	1	12	1	1	1	3500	1410	250	65	96	output
5	1	12	1	1	2	3800	1425	40	20	93	=
5	1	12	1	1	3	3900	1405	60	65	92	[]
4	1	12	1	2	0	3500	1510	760	55	-1	
5	1	12	1	2	1	3500	1510	125	55	85	for
5	1	12	1	2	2	3680	1525	120	40	95	row
5	1	12	1	2	3	3845	1510	80	55	95	in
5	1	12	1	2	4	3985	1510	275	55	95	reader:
3	1	12	2	0	0	3500	1610	2030	170	-1	
4	1	12	2	1	0	3670	1610	1860	70	-1	
5	1	12	2	1	1	3670	1610	895	70	89	output.append(dict(k,
5	1	12	2	1	2	4625	1610	70	65	91	v)
5	1	12	2	1	3	4755	1610	125	55	93	for
5	1	12	2	1	4	4930	1610	65	65	90	k,
5	1	12	2	1	5	5060	1625	35	40	92	v
5	1	12	2	1	6	5145	1610	80	55	96	in
5	1	12	2	1	7	5285	1625	120	40	96	row
5	1	12	2	1	8	5450	1610	80	55	95	if
4	1	12	2	2	0	3500	1715	1195	65	-1	
5	1	12	2	2	1	3500	1715	40	55	90	k
5	1	12	2	2	2	3585	1715	80	55	93	in
5	1	12	2	2	3	3725	1715	230	65	74	(‘id',
5	1	12	2	2	4	4035	1715	270	65	58	‘col?',
5	1	12	2	2	5	4380	1715	315	65	85	‘col3'))
2	1	13	0	0	0	3500	1820	1540	45	-1	
3	1	13	1	0	0	3500	1820	1540	45	-1	
4	1	13	1	1	0	3500	1820	1540	45	-1	
5	1	13	1	1	1	3500	1825	250	40	18	Feet
5	1	13	1	1	2	3805	1820	640	45	18	eee
5	1	13	1	1	3	4129	1813	121	58	30	oe
5	1	13	1	1	4	4327	1813	131	58	30	ie
5	1	13	1	1	5	4495	1835	70	25	12	oe
5	1	13	1	1	6	4625	1820	415	45	26	tele
2	1	14	0	0	0	4507	1970	43	45	-1	
3	1	14	1	0	0	4475	1970	75	45	-1	
4	1	14	1	1	0	4507	1970	43	45	-1	
5	1	14	1	1	1	4507	1970	43	45	17	a
